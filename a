#include <bits/stdc++.h>
using namespace std;

vector<int> getMinRemovals(vector<int> cart_items, int budget) {
    int n = cart_items.size();
    vector<int> result(n, 0);
    long long sum = 0;

    // Max-heap to keep track of previous items (0..i-1)
    priority_queue<int> pq;

    for (int i = 0; i < n; i++) {
        sum += cart_items[i];
        int removals = 0;

        // Remove largest items from previous indices if sum > budget
        priority_queue<int> temp = pq;
        long long temp_sum = sum;
        removals = 0;

        while (temp_sum > budget && !temp.empty()) {
            int largest = temp.top();
            temp.pop();
            temp_sum -= largest;
            removals++;
        }

        result[i] = removals;

        // Add current item to heap for future sub-carts
        pq.push(cart_items[i]);
    }

    return result;
}

int main() {
    vector<int> cart_items = {2, 3, 7};
    int budget = 8;

    vector<int> ans = getMinRemovals(cart_items, budget);
    for (int x : ans) cout << x << " ";
    cout << endl; // Output: 0 0 2

    return 0;
}
