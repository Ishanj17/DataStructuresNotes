#include <bits/stdc++.h>
using namespace std;

vector<int> getMinRemovals(vector<int>& cart_items, int budget) {
    int n = cart_items.size();
    vector<int> result(n, 0);
    int freq[101] = {0}; // item prices 1..100
    long long sum = 0;

    for (int i = 0; i < n; i++) {
        sum += cart_items[i];
        int removals = 0;

        int remaining = sum;

        // Greedily remove largest previous items first
        for (int price = 100; price >= 1 && remaining > budget; price--) {
            if (freq[price] > 0) {
                int count = freq[price];
                // How many of this price to remove
                int removeCount = min(count, (int)((remaining - budget + price - 1)/price));
                remaining -= removeCount * price;
                removals += removeCount;
            }
        }

        result[i] = removals;
        freq[cart_items[i]]++; // add current item to freq for future
    }

    return result;
}

int main() {
    vector<int> cart_items = {2,3,7};
    int budget = 8;
    vector<int> ans = getMinRemovals(cart_items, budget);
    for (int x : ans) cout << x << " ";
    cout << endl; // Output: 0 0 2
    return 0;
}
